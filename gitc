#!/bin/bash -e
# Usage gitc {local|fetch|pull}
# Defaults to local

command=${1:-local}

# Usage: pad_string LENGTH {PADDING_CHARACTER=' '}
function pad_string {
	local line=''
	local length=$1
	local padding_character=' '
	if [[ "$2" != "" ]]; then
		padding_character=$2
	fi
	while((${#line} < $length)); do
		line="$line$padding_character"
	done
	echo -n "$line"
}

# Usage: left_justify MESSAGE LENGTH {PADDING_CHARACTER=' '}
function left_justify {
	local message=$1
	local length=$2
	local padding_character='='
	if [[ "$3" != "" ]]; then
		padding_character=$3
	fi
	echo "$message$(pad_string $length-${#message} $padding_character)"
}

function log.header {
	lengthTail=$(expr 64 - ${#1} - ${#2})
	tail=$(left_justify "" $lengthTail "=")
	echo -ne "\x1B[97m==== \x1B[100m$1\x1B[49m \x1B[97m$tail\x1B[0m (\x1B[35m$2\x1B[0m|"
}

function log.status {
	if [ "$1" == "clean" ]; then
		echo -ne "\x1B[32m✔"
	elif [ "$1" == "dirty" ]; then
		echo -ne "\x1B[33m●"
	elif [ "$1" == "error" ]; then
		echo -ne "\x1B[31m✖"
	fi
	echo -ne "\x1B[0m"
	if [ -n "$2" ]; then
		echo -n "↓$2"
	fi
	echo -e ")"
}

function log.info {
	echo -e "     \x1B[92m$1\x1B[0m"
}

function log.warn {
	echo -e "     \x1B[93m$1\x1B[0m"
}

function log.error {
	echo -e "     \x1B[91m$1\x1B[0m"
}


# Returns "*" if the current git branch is dirty.
function isDirty {
	#[[ $(git diff --shortstat 2> /dev/null | tail -n1) != "" ]] && echo "*"
	echo `cd $1; git status --porcelain`
}

# Returns "0" if the current git repository is empty (newly created)
function isEmptyGitRepo {
	echo `cd $1; find .git/objects -type f | wc -l`
}

# Returns the number of untracked files
#function numUntrackedFiles {
#	expr `git status --porcelain 2>/dev/null| grep "^??" | wc -l` 
#}

function getCurrentBranch {
	if [ `isEmptyGitRepo $1` == "0" ]; then
		echo "-"
	else
		(cd $1; git rev-parse --abbrev-ref HEAD)
	fi
}

function printLastLogs {
	#(cd $1; git --no-pager log --oneline -n $2)
	(cd $1; git --no-pager log --pretty='format:%C(yellow)%h%Creset %C(blue)%ar%Creset%C(green)%d%Creset %s %C(dim normal)(%an)%Creset' -n $2)
	echo ""
}

function printLocalChanges {
	# print changes in short form
	(cd $1; git status -s)
}


function mergeDirectory {
	isTrackingBranch=`cd $1; git rev-parse --abbrev-ref --symbolic-full-name @{u} 2>&1 > /dev/null ; echo $?`
	if [ "$isTrackingBranch" == 0 ]; then
		(cd $1; git merge 2>&1 > /dev/null)
	else
		log.warn "Untracked branch, skipping"
	fi
}


function checkCommand {
	if [ "$1" != "local" -a "$1" != "fetch" -a "$1" != "pull" -a "$1" != "prune" ]; then
		echo "Invalid command: '$1'"
		echo -e "Usage: gitc [\x1B[4mlocal\x1B[0m|fetch|pull|prune]"
		exit 1
	fi
}


function checkDirectory {
	if [ -z "${dirs}" ]; then
		echo -e "No git repositories found. gitc must \x1B[4mnot\x1B[0m be performed inside a git-repository, but in the directory above."
		exit 2
	fi
}


function getGitDirectories {
	for dir in `ls -1 -d */.git 2> /dev/null`; do
		echo "${dir%/*}"
	done
}


checkCommand $command
dirs=`getGitDirectories`
checkDirectory

# iterate thru all directories
for dir in $dirs; do
	# check if is directy by checking if contains .git directory
	if [ -d $dir/.git ]; then
		log.header $dir `getCurrentBranch $dir`

		if [ "$command" == "fetch" -o "$command" == "pull" -o "$command" == "prune" ]; then
			if [ "$command" == "prune" ]; then
				fetchParam="--prune"
			fi
			fetchCode=$(cd $dir ; git fetch $fetchParam -q 2> /dev/null ; echo $?)

			if [ "$fetchCode" == "0" ]; then

				objects=`find $dir/.git/objects -type f | wc -l`
				if [ "$objects" != "0" ]; then
					behind=`cd $dir; git rev-list HEAD...origin/master --count`
				fi

				if [ "$objects" == "0" ]; then
					log.status "error"
					log.error "Empty git repository"
				elif [ "$behind" != "0" ]; then
					currentBranch=`getCurrentBranch $dir`
					remotesExisting=$(cd $dir; git ls-remote . refs/remotes/origin/$currentBranch | wc -l)
					if [ "$remotesExisting" -eq "0" ]; then
						log.status "clean" 
						log.info "No remote for the current branch."
					else
						if [ "$command" == "fetch" ]; then
							log.status "dirty" $behind
							printLastLogs $dir $behind
						elif [ "$command" == "pull" ]; then
							if [[ `isDirty $dir` ]]; then
								log.status "error" $behind
								log.error "Can not be merged: local changes"
								printLocalChanges $dir
							else
								log.status "dirty" $behind
								mergeDirectory $dir
								printLastLogs $dir $behind
							fi
						fi
					fi
				else
					log.status "clean"
					#log.info "No changes"
				fi

			else
				log.status "error"
				log.error "Could not be fetched!"
			fi
		elif [ "$command" == "local" ]; then
			if [[ `isDirty $dir` ]]; then
				log.status "dirty"
				log.warn "Has local changes"
				printLocalChanges $dir
			else
				log.status "clean"
				#log.info "No changes"
			fi
		fi
	fi
done

